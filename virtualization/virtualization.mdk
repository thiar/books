Title         : Virtualization
Author        : You
Logo          : True

[TITLE]

# Pengertian 
Virtualisasi adalah teknologi untuk membuat sistem operasi dapat berjalan
pada lingkungan virtual. Virtualisasi memungkinkan berjalannya beberapa
sistem operasi pada satu komputer fisik yang sama pada waktu yang bersamaan.
Sistem operasi yang berjalan pada virtualisasi terisolasi dari
lingkungan sistem operasi komputer fisiknya, sehingga jika terjadi gangguan 
pada sistem operasi virtual tidak akan menggangu komputer fisik/host nya.
Beberapa contoh teknologi virtualisasi antara lain virtualbox, vmware, vagrant
, dan docker.

# Virtual Machine dan Container
Teknologi virtualisasi saat ini terbagi menjadi dua jenis yaitu virtual mesin
dan kontainer. Virtual mesin adalah virtualisasi yang memvirtualkan sistem operasi
secara keseluruhan, sedangkan kontainer adalah teknologi yang memvirtualisasikan
aplikasi atau layanan. Contoh virtual mesin antara lain vmware dan virtualbox.
Sedangkan contoh dari kontainer adalah LXC dan docker.
Perbedaan antara virtual mesin dan kontainer dijelaskan oleh gambar berikut.

~ Center
![vm_vs_container]
~

Terlihat perbedaan antara virtual mesin(kiri) dan kontainer(kanan). 
Virtual mesin memvirtualkan keseluruhan sistem operasi, sedangkan kontainer
hanya memvirtualkan aplikasi dan pustaka/library yang diperlukan.

# Provisioning
_Provisioning_ adalah proses penyediaan aplikasi atau layanan pada komptuasi awan.
_Provisioning_ seringkali dilakukan menggunakan virtualisasi. Proses _provisioning_
terdiri dari pembuatan instance virtualisasi, konfigurasi sumber daya, 
instalasi sistem operasi, instalasi aplikasi atau layanan, dan konfigurasi apliaksi
atau layanan yang digunakan. Proses _provisioning_ sering kali menggunakan virtualisasi karena
dalam komputasi awan tidak boleh ada _down time_/layanan mati dalam waktu yang
cukup lama. Dengan virtualisasi, proses _provisioning_ menjadi lebih cepat dan
mengurangi down time hingga layanan _cloud_ terkesan memiliki _zero down time_.

# Vagrant
Vagrant adalah kerangka kerja untuk mengelola virtualisasi. Vagrant
menciptakan lingkungan virtual yang terisolasi. Vagrant sering digunakan oleh
developer yang bekerja dalam sebuah tim. Vagrant memastikan lingkungan pengembangan
antar developer sama dan konsisten, sehingga menghilangkan istilah "Ini bekerja pada sistem saya".
Vagrant juga digunakan pada proses _provisioning_/penyediaan layanan. 
Vagrant mendukung banyak provider virtualisasi seperti virtualbox, vmware, aws, dan docker.

## Getting Started
### Instalasi Vagrant
Untuk melakukan Instalasi vagrant terlebih dahulu siapkan komputer dengan sistem
operasi ubuntu 16.04. Instalasi vagrant dapat dilakukan dengan step-step berikut:

1. Install vagrant.
``` javascript
apt-get install vagrant
```
2. Install virtualbox.
   
``` javascript
apt-get install virtualbox
```
3. Jika telah selesai, coba periksa versi vagrant yang telah terinstall
  
``` javascript
vagrant --version
```

### Membuat Virtualisasi
Setelah berhasil menginstall vagrant, selanjutnya kita akan mencoba membuat
virtualisasi baru menggunakan provider virtualbox. Langkah-langkah pembuatan virtualisasi baru
dijelaskan sebagai berikut:

1. Buat folder baru untuk meletakkan konfigurasi.
  
``` javascript
mkdir vagrant-example
```
2. Masuk ke dalam folder yang telah di buat.
``` javascript
cd vagrant-example
```
3. Inisialisasi projek vagrant
``` javascript
vagrant init
```
  Setelah menjalankan perintah diatas akan dibuat file baru bernama `Vagrantfile`

4. Tambahkan box baru.
``` javascript
vagrant box add hashicorp/precise64
```
  Kemudian jika box mendukung lebih dari satu provider
  akan ditanyakan provider yang akan digunakan. Pilih provider virtualbox.
  
5. Edit file `Vagrantfile` kemudian ganti vm.box menjadi hashicorp/precise64
``` javascript
config.vm.box = "base"
```
menjadi
``` javascript
config.vm.box = "hashicorp/precise64"
```


  Kemudian simpan file `Vagrantfile` yang telah diedit sebelumnya.

6. Jalankan virtualisasi
``` javascript
vagrant up
```

7. Setelah proses pembuatan virtualisasi selesai, login ke dalam virtualisasi menggunakan perintah `ssh`
``` javascript
vagrant ssh
```
8. Untuk mematikan virtualisasi gunakan fungsi `halt`
``` javascript
vagrant halt
```
9. Untuk melihat status virtualisasi gunakan fungsi `status`
``` javascript
vagrant status
```
10. Untuk menghapus virtualisasi gunakan fungsi `destroy`
``` javascript
vagrant destroy
```
  Menghapus virtualisasi akan menghapus semua data atau aplikasi di dalam virtualisasi
  

### Menetapkan penggunaan memori pada virtual mesin
Penggunaan memori pada virtual mesin terkadang kurang atau terlalu banyak. Beberapa apliaksi membutuhkan memori/RAM yang besar untuk menjalankan fungsinya, tetapi beberapa aplikasi tidak membutuhkan memori yang besar. Untuk melakukan efisiensi pada penggunaan virtual mesin, kita dapat mengeset memori yang digunakan oleh virtual mesin kita. Buka file `Vagrantfile` kemudian tambahkan baris berikut didalam konfigurasi vagrant:
``` javascript
config.vm.provider "virtualbox" do |v|
  v.memory = 256
  v.cpus = 1
end
```
Simpan file tersebut dan jalankan vagrant reload. Setelah virtual mesin berhasil di reload masuk ke dalam virtual mesin menggunakan perintah `vagrant ssh` kemudian jalankan perintah free -h pada virtual mesin untuk melihat memori yang digunakan.


### Sinkronisasi folder
Adakalanya kita ingin mendevelop aplikasi menggunakan editor favorit kita
seperti `sublimetext`, `netbeans` dan lain sebagainya, tetapi kita ingin
agar kode-kode aplikasi kita tersebut berada di dalam virtualisasi sehingga
ketika terjadi perubahan kode maka kode tersebut langsung dipindahkan ke
dalam virtualisasi atau kita ingin folder di dalam virtualisasi dapat diakses
melalui komputer host untuk keperluan backup/audit. Hal seperti ini dapat dilakukan menggunakan fitur sinkronisasi
pada vagrant. Folder yang di sinkronisasi dapat diakses melalui komputer host 
atau virtual dengan kondisi tersinkronisasi, sehingga ketika terjadi perubahan
melalui komputer host atau melalui virtualisasi data-data dalam folder tersebut
tetap sama. Untuk mengaktifkan sinkronisasi folder lakukan langkah-langkah 
berikut:

1. Buka file `Vagrantfile` ubah baris berikut.
``` javascript
# config.vm.synced_folder "../data", "/vagrant_data"
menjadi
# config.vm.synced_folder "src/", "/var/www"
```
Simpan file `Vagrantfile`. `src/` adalah folder pada komputer host, sedangkan 
`/var/www` adalah folder pada komputer virtualisasi.

2. Buat folder src di dalam folder projek `vagrant example` kemudian tambahkan
   file `index.html`
``` javascript
mkdir src
echo "hello world" >> src/index.html
```
3. Jalankan virtualisasi.
``` javascript
vagrant up
```
4. Masuk ke dalam virtualisasi.
``` javascript
vagrant ssh
```
5. Lakukan perubahan pada file `src/index.html` di komputer host, kemudian
cek file `index.html` yang berada pada folder `/var/www` di komputer virtual.
Kedua file akan berisi data yang sama, karena telah tersinkronisasi.

### Provisioning aplikasi pada komputer virtual
Kita menginginkan komputer virtual yang kita gunakan telah terinstall aplikasi
aplikasi yang kita butuhkan. Tahapan instalasi dan konfigurasi tersebut sering dikenal dengan sebutan
_provisioning_. Pada vagrant, _provisioning_ dapat dilakukan dengan mudah. Kita dapat
membuat script menggunakan bash scripting untuk melakukan _provisioning_. 
Langkah-langkah untuk melakukan _provisioning_ adalah sebagai berikut:

1. Buat bash script dengan nama `bootsrap.sh` pada folder yang sama dengan vagrant file.
2. Untuk menginstall apache tuliskan baris berikut pada file `bootsrap.sh`.
``` javascript
#!/usr/bin/env bash
apt-get update
apt-get install -y apache2
```
3. Pada file `Vagrantfile` dibawah baris `config.vm.box = "hashicorp/precise64"` tambahkan baris 
`config.vm.provision :shell, path: "bootstrap.sh"`.
``` javascript
Vagrant.configure("2") do |config|
  config.vm.box = "hashicorp/precise64"
  config.vm.provision "shell", path: "bootstrap.sh"
end
```
4. Simpan file Vagrantfile kemudian nyalakan virtualisasi.
``` javascript
vagrant up
```
Jika virtualisasi sudah dibuat dan sedang menyala maka jalankan 
fungsi `reload` dengan menambahkan flag `--provision` untuk memaksa 
vagrant merestart virtualisasi dan menjalankan script provisioning 
ketika mesin virtual sedang aktif.
``` javascript
vagrant reload --provision
```
5. Cek apakah provisioning berhasil dengan masuk kedalam virtualisasi menggunakan
`ssh`.
``` javascript
vagrant ssh
```
Cek apakah apache telah berhasil terinstall
``` javascript
service apache2 status
```

Proses provisioning dapat juga menggunakan _configuration management_ seperti
ansible, chef, atau puppet.


### Port Forwarders
Pada linkungan produksi, aplikasi yang berjalan di virtualisasi
harus dapat diakses melalui komputer hostnya. Akses ini dilakukan dengan
mekanisme _port forwarders_ . _Port forwarders_ bekerja dengan cara meneruskan
akses dari port komputer host menuju port tertentu pada virtualisasi.
_Port forwarders_ dapat diilustrasikan dengan gambar berikut.

~ Center
![port forwarder]
~

Klien mengakses port 8080/8443 pada komputer host, kemudian akan diteruskan
menuju port 80/443 pada virtualisasi vagrant.
Untuk mengaktifkan _port forwarders_, terdapat step-step sebagai berikut:

1. Buka file `Vagrantfile` tambahkan baris berikut.
``` javascript
config.vm.network "forwarded_port", guest: 80, host: 8080
```
Konfigurasi tersebut akan meneruskan akses dari port 8080 pada host, 
menuju port 80 pada virtualisasi.

2. Jalankan virtualsisasi.
   
``` javascript
vagrant up
```
3. Atau restart vagrant jika virtualisasi sedang berjalan.
``` javascript
vagrant reload
```
4. Coba akses komputer host menggunakan browser dengan mengetikkan http://ip:port
pada url.

5. Maka akan muncul halaman apache2 yang telah terinstall pada komputer virtualisasi.


### Static Local IP
Ketika banyak virtualisasi yang dijalankan, kita membutuhkan alamat
IP lokal agar antar virtualisasi dapat saling berkomunikasi. IP lokal
hanya dapat diakses oleh komputer host dan virtualisasi pada komputer host
yang sama. Untuk menentukan alamat IP pada virtualisasi lakukan step-step
berikut:

1. Buka file `Vagrantfile` edit baris berikut.
  
``` javascript
config.vm.network "private_network", ip: "192.168.2.2"
```
`192.168.2.2` adalah alamat ip lokal dari virtualisasi yang akan dijalankan.

2. Simpan file `Vagrantfile` dan jalankan virtualisasi.
   
``` javascript
vagrant up
```
3. Jika virutalisasi sedang berjalan, maka jalankan fungsi `reload`.
``` javascript
vagrant reload
```

Untuk pemilihan IP, pilihlah ip dengan angka belakang **2-254**, karena ip dengan
angka belakang **1** sudah digunakan oleh komputer host sebagai router antar virtualisasi.
Alamat IP lokal antar virtualisasi tidak perlu harus dalam subnet yang sama.
Alamat IP pada subnet yang berbeda tetap bisa berkomunikasi, karena mekanisme
_routing_ telah diatur oleh vagrant.

### Bridged IP
Pada kondisi tertentu dibutuhkan virtualisasi yang dapat di akses dari luar,
contohnya pada layanan _cloud_ vps(_virtual private server_). Untuk membuat
virtualisasi dapat diakses dari luar, dibutuhkan mekanisme yang disebut _bridging_ . 
Mekanisme _bridging_ ini telah ditangani oleh vagrant. Untuk mengaktifkan
fungsi _bridged_ ikuti langkah-langkah berikut:

1. Buka file `Vagrantfile` edit baris berikut.
   Untuk konfigurasi IP DHCP pada virtualiasasi gunakan konfigurasi berikut
``` javascript
config.vm.network "public_network"
```
Untuk konfigurasi IP static pada virtualiasasi gunakan konfigurasi berikut
``` javascript
config.vm.network "public_network", ip: "10.151.36.225"
```
2. Simpan file `Vagrantfile` dan jalankan virtualisasi.
   
``` javascript
vagrant up
```
3. Jika virutalisasi sedang berjalan, maka jalankan fungsi `reload`.
``` javascript
vagrant reload
```

`ping` alamat ip virtualisasi untuk melihat hasilnya.

## Lebih Lanjut
### Share Vagrant Environtment
### Export custom box
### Upload custom box ke HasiCorp's Atlas cloud

# Docker
Docker adalah virtualisasi berbentuk kontainer. Kontainer bekerja lebih
efisien daripada virtual mesin, karena yang divirtualisasikan hanya aplikasi
dan library yang dibutuhkan saja. Kontainer lebih hemat memory daripada 
virtual mesin. Untuk memulai menggunakan docker terlebih dahulu mesin docker harus terinstall
harus terinstall pada komputer host. 
## Getting Started
Docker dapat diinstall pada sistem operasi yang mendukung virtualisasi secara
_native_ . Pada sistem operasi windows, minimal windows 10 atau 
windows 8 dengan mengaktifkan fitur Hyper-V. Pada sistem operasi
linux seperti debian/ubuntu telah mendukung virtualisasi sehingga dapat menjalankan
mesin docker. 
### Instalasi Docker-engine
Untuk mendapatkan rilis terbaru dan paling stabil, disarankan
menggunakan ubuntu 16.04. Instalasai docker-engine dapat dilakukan dengan
mengikuti langkah-langkah berikut:

1. Tambahkan GPG key untuk mendapatkan repository docker terbaru.
``` javascript
sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
```
Tambahkan APT repostory
``` javascript
sudo apt-add-repository 'deb https://apt.dockerproject.org/repo ubuntu-xenial main'
```

2. Update repository.
``` javascript
sudo apt-get update
```

3. Pastkan repository sudah benar.
``` javascript
apt-cache policy docker-engine
```
akan terlihat seperti
``` javascript
docker-engine:
  Installed: (none)
  Candidate: 1.11.1-0~xenial
  Version table:
     1.11.1-0~xenial 500
        500 https://apt.dockerproject.org/repo ubuntu-xenial/main amd64 Packages
     1.11.0-0~xenial 500
        500 https://apt.dockerproject.org/repo ubuntu-xenial/main amd64 Packages
```

4. Install mesin docker.
``` javascript
sudo apt-get install -y docker-engine
```

5. cek status apakah instalasi telah berhasil
``` javascript
sudo systemctl status docker
```

### Menjalankan docker tanpa akses sudo
Pada dasarnya docker hanya bisa dijalankan menggunakan akses _root_ atau
_sudo_. Tetapi pada beberapa kasus kita ingin menjalankan docker dengan
hak akses yang tidak terlalu tinggi, untuk menjaga keamanan pada sistem.
Jalankan perintah berikut untuk memberi akses pada user.
``` javascript
sudo usermod -aG docker $(whoami)
```
Perintah tersebut akan memberikan hak akses untuk menjalankan docker
kepada user yang sedang login. Untuk memberikan akses ke user khusus
gunakan perintah.
``` javascript
sudo usermod -aG docker username
```
ganti username dengan nama user yang akan diberi akses. Untuk melihat perubahan
logout dan login kembali dengan user tersebut.

Untuk memastikan instalasi telah berjalan dengan baik, jalankan perintah berikut
``` javascript
docker run hello-world
```
jika berjalan dengan lancar, maka akan menampilkan pesan berikut
``` javascript
Hello from Docker.
This message shows that your installation appears to be working correctly.
```

## Menjalankan aplikasi apache2 sebagai kontainer
Pada pembahasan sebelumnya kita menjalankan apache2 pada virtualbox menggunakan
framework vagrant. Aplikasi berjalan pada virtualisasi yang berbentuk virtual
mesin. Kali ini kita akan menjalankan apache2 sebagai kontainer. Docker 
telah menyediakan banyak kontainer dengan macam-macam jenis aplikasi.
Untuk melihat apakah apache2 terdapat pada database docker, jalankan
perintah berikut.
``` javascript
docker search apache2
```
Kemudian akan ditampilkan daftar kontainer dengan nama apache2
``` javascript
NAME                                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
reinblau/php-apache2                             Apache2 Server for PHP Projects                 12                   [OK]
tianon/apache2                                                                                   4                    [OK]
teamrock/apache2                                 TeamRocks Apache2                               3                    [OK]
ascdc/apache2-php7                               apache2 + php7                                  1                    [OK]
mad93/apache2-php5                               Apache2 with php5                               1                    [OK]
mad93/apache2                                    Apache2                                         1                    [OK]
enonicio/apache2                                 Base Docker image for apache2                   1                    [OK]
silintl/apache2                                                                                  1                    [OK]
danielperezr88/apache2                           Apache2+Debian Dockerfile                       0                    [OK]
sergeyzskw/apache2                               Debian/Apache2                                  0                    [OK]
mrlesmithjr/apache2                              Build [Docker] image for [Apache2] provisi...   0                    [OK]
jeffutter/apache2-php                            Docker Image with apache2, php5.5 and php ...   0                    [OK]
vger/apache2                                     Apache2 base image, based on Debian Jessie.     0                    [OK]
ascdc/apache2-php56                              apache2-php56                                   0                    [OK]
pamtrak06/ubuntu14.04-apache2-python             python + OWSLib with apache2 & ubuntu 14.04     0                    [OK]
szyhf/apache2-python                             An python2.7 web server running by Apache2...   0                    [OK]
datenbetrieb/apache2                             apache2-webserver                               0                    [OK]
raphaelnoailles/apache2                                                                          0                    [OK]
bunchjesse/php5.6-apache2                        PHP 5.6 + Apache2 + A bunch of switches         0                    [OK]
jecklgamis/apache2                               apache2                                         0                    [OK]
rethink/testbed-apache2-reverse-proxy-baseline   Basic apache2-based reverse proxy installa...   0                    [OK]
bunchjesse/php7.0-apache2                        PHP 7.0 + Apache2 + A bunch of switches         0                    [OK]
shobhitsinghal624/apache2                        Apache2                                         0                    [OK]
hiracchi/apache2                                 apache2                                         0                    [OK]
nutsllc/toybox-apache2                           Apache2 Dockerfiles extended the official ...   0                    [OK]
```

Daftar tersebut adalah kontainer yang dibuat oleh para developer. Untuk mencari
kontainer apache2 yang dikeluarkan secara resmi oleh vendor, Jalankan perintah
``` javascript
docker search httpd
```
Kemudian akan ditampilkan kontainer dengan nama httpd
``` javascript
NAME                          DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
httpd                         The Apache HTTP Server Project                  910       [OK]       
centos/httpd                                                                  12                   [OK]
lolhens/httpd                 Apache httpd 2 Server                           2                    [OK]
nfqsolutions/httpd            Image of Apache HTTPD 2.4                       1                    [OK]
microwebapps/httpd-frontend   Httpd frontend allowing simple deployment ...   1                    [OK]
rgielen/httpd-image-php5      Docker image for Apache httpd with PHP 5 b...   1                    [OK]
interferex/httpd              Simple HTTPd Server + TC Rate Limiting          0                    [OK]
publicisworldwide/httpd       The Apache httpd webserver.                     0                    [OK]
publici/httpd                 httpd:latest                                    0                    [OK]
crashvb/httpd                 Contains httpd.                                 0                    [OK]
dionefc/httpd                 httpd docker                                    0                    [OK]
ourui521314/httpd             httpd dockfile                                  0                    [OK]
objectstyle/httpd             ObjectStyle HTTPD Image                         0                    [OK]
superkul/httpd                Centos httpd server                             0                    [OK]
efrecon/httpd                 A micro-sized httpd. Start serving files i...   0                    [OK]
rgielen/httpd-image-simple    Docker image for simple Apache httpd based...   0                    [OK]
openhades/httpd               OpenHades Apache httpd container                0                    [OK]
ibtech/httpd                  Apache HTTPD padrão da IBTech                   0                    [OK]
jckrz/httpd-htaccess-ssl      Apache httpd with SSL and .htaccess files ...   0                    [OK]
steelorbis/httpd              local httpd                                     0                    [OK]
rgielen/httpd-image-drush     Apache HTTPD + Drupal Shell Docker image b...   0                    [OK]
solsson/httpd                 Derivatives of the official httpd image         0                    [OK]
learninglayers/httpd                                                          0                    [OK]
aintohvri/docker-httpd        Apache HTTPD Docker extension for legacy P...   0                    [OK]
criedl/httpd                  apache2/php + mod_auth_cookie_mysql2            0                    [OK]
```
Terdapat hasil pencarian dengan Name httpd dan official ok, berarti kontainer/image
tersebut adalah image resmi yang dikeluarkan oleh vendor.
Untuk menjalankan kontainer apache2, ikuti langkah-langkah berikut:

1. Download image apache2 httpd.
``` javascript
  docker pull httpd
```
2. Buat kontainer baru menggunakan base image httpd.
   
``` javascript
docker run --name apache-kita -p 8080:80 -d httpd
```

  * perintah `--name` digunakan untuk memberikan nama pada kontainer yang akan dibuat.
  * perintah `-p` digunakan sebagai port forwarding `8080` adalah port pada host,
    sedangkan `80` adalah port pada kontainer.
  * perintah `-d` menandakan kontainer dijalankan sebagai servis.
  * `httpd` adalah nama image yang digunakan untuk membuat kontainer.

3. Setelah berhasil dibuat, jalankan perintah `docker ps` untuk melihat
   kontainer yang sedang aktif.
``` javascript
   CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS                  NAMES
9e0840ca22d8        httpd               "httpd-foreground"   3 seconds ago       Up 2 seconds        0.0.0.0:8080->80/tcp   apache-kita
```

4. Untuk menghentikan/menyalakan kontainer jalankan perintah `stop`, `start` atau `restart`
   diikuti dengan nama kontainer.
``` javascript
  docker stop apache-kita
  docker start apache-kita
  docker restart apache-kita
```

5. Untuk menghapus kontainer gunakan perintah `rm` diikuti dengan nama kontainer.
   
``` javascript
docker rm apache-kita
```

## Volume Management pada Docker
Docker tidak menyimpan state atau data apapun di dalam kontainer. Sehingga
jika kontainer mati kemudian dinyalakan lagi maka state akan kembali seperti semula.
Semua perubahan tidak tersimpan, berbeda dengan virtual mesin yang menyimpan
data dan state. Untuk mengatasi hal tersebut, docker memiliki fungsi `volume`
untuk menyimpan perubahan data pada komputer hostnya. Sehingga ketika kontainer
mati atau dihapus, data tetap tersimpan di komputer host dan dapat digunakan kembali
oleh kontainer yang sama atau berbeda. Untuk mengaktifkan eksternal volume
ikuti langkah-langkah berikut:

1. Matikan dan hapus kotnainer yang telah kita buat sebelumnya.
   
``` javascript
docker stop apache-kita
   docker rm apache-kita
```

2. Buat folder baru bernama src dan tambahkan file `index.html`.
   
``` javascript
mkdir src
echo "hello world" >> src/index.html
```

3. Jalankan kotnainer dengan menambahkan perintah `-v`.
   
``` javascript
docker run --name apache-kita -v "$PWD"/src:/usr/local/apache2/htdocs/ -p 8080:80 -d httpd
```
perintah `"$PWD"/src:/usr/local/apache2/htdocs/`, akan menghubungkan
folder src ke folder `htdocs` pada kontainer. Perintah `"$PWD"` digunakan
untuk mendapatkan posisi folder saat ini. Jadi jika kita sedang berada 
pada home user kita, maka `"$PWD"` adalah `/home/user`.

4. Akses kembali apache2 melalui komputer host dengan `localhost:8080`

Volume pada docker sangat berguna, karena kontainer tidak mampu menyimpan state
atau data. Sehingga jika menggunakan kontainer untuk menjalankan aplikasi
penyimpanan data seperti database, maka kita harus menggunakan volume
untuk menjaga data kita tetap tersimpan saat kontainer dihapus atau dimatikan.

## Lebih Lanjut
### Dockerfile
### Upload kontainer ke dockerhub

# Mengelola Docker dengan framework Vagrant
Vagrant adalah framework untuk virtualisasi, pada pembahasan sebelumnya
kita menggunakan vagrant dengan virtualbox sebagai provider default.
Vagrant juga mendukung provider lain seperti docker, jadi kita bisa 
menjalankan kontainer docker melalui framework vagrant.
 
## Menjalankan kontainer docker melalui vagrant
Untuk mulai menggunakan vagrant dengan provider docker ikuti langkah-langkah berikut:

1. Buat folder baru, sebagai folder kerja kita, kemudian masuk kedalam folder tersebut.
   
``` javascript
mkdir vagrant-docker
   cd vagrant-docker
```

2. Inisialisasi project vagrant.
   
``` javascript
vagrant init
```

3. Buka file `Vagrantfile`, karena kita tidak menggunakan provider virtualbox lagi, maka baris `config.vm.box`
   bisa kita hapus atau di nonaktifkan.
   
``` javascript
config.vm.box = "base"
```
menjadi
``` javascript
# config.vm.box = "base"
```

4. Tambahkan baris berikut untuk menjalankan kontainer.
``` javascript
  config.vm.provider "docker" do |d|
    d.image = "httpd"
    d.ports = ["8080:80"]
  end
```
5. Simpan file `Vagrantfile` dan jalankan vagrant
``` javascript
vagrant up --provider=docker
```
fungsi `--provider` dibutuhkan untuk menentukan provider yang akan kita gunakan.

Untuk mengetahui apakah kontainer sudah berjalan dengan benar jalankan
perintah `vagrant status` atau `docker ps`. Akses `localhost:8080` untuk
mengetahui apakah port forwarding telah berjalan dengan benar.

## Konfigurasi Volume Docker pada Vagrant
Seperti dijelaskan sebelumnya, kontainer tidak menyimpan state atau data apapun
sehingga kita membutuhkan volume untuk menyimpan data-data kita. Pada vagrant
volume dapat dikonfigurasi menggunakan perintah `"synced_folder"` seperti sebelumnya.
Tetapi disini kita akan menggunakan perintah `"volumes"` yang disediakan khusus untu
provider docker.

1. Buat folder `src` dan file `index.html`
``` javascript
   mkdir src
   echo "hello vagrant docker" >> src/index.html
```
2. Buka fle `Vagrantfile`, tambahkan beberapa baris hingga menjadi seperti ini.
``` javascript
pwd = File.dirname(__FILE__)
config.vm.provider "docker" do |d|
  d.image = "httpd"
  d.volumes = [pwd+"/src/:/usr/local/apache2/htdocs/"]
  d.ports = ["8000:80"]
end
```
Variabel `pwd` digunakan untuk mendapatkan `path` dari folder kita saat ini.
Kemudian pada baris `d.volumes` mendefinisikan volume yang akan digunakan
oleh kontainer. Folder `src` adalah folder tempat file `index.html` kita berada, tambahan `pwd` digunakan untuk memberitahu docker alamat absolut dari folder
src, karena docker hanya menerima alamat absolut.

3. Simpan file `Vagrantfile`, karena kontainer berbeda dengan virtual mesin,
maka perubahan hanya akan diterapkan jika kontainer dihapus dan dibuat dari awal. Maka
kontainer harus dihapus dan dijalankan ulang.
``` javascript
vagrant destroy
vagrant up --provider=docker
```

Akses `localhost:8080` untuk melihat perubahan yang terjadi.


# Lebih Lanjut
## Menjalankan Multiple virtual mesin pada Vagrant
## Menjalankan Multiple kontainer pada Vagrant

# Exercise
Untuk memperdalam pemahaman, selesaikan permasalahan-permasalahan berikut
mengunakan vagrant virtualbox dan docker.
## Vagrant virtualbox

1. Buat vagrant virtualbox dan lakukan provisioning 
   * apache2 
   * php7 + opcache 
   * laravel
   
Laravel harus dapat diakses melalui port 8080 dari komputer host

2. Buat vagrant virtualbox dan lakukan provisioning 
   * nginx
   * hhvm

   Buat sinkronisasi folder `src` ke `var/www`, folder `src` berisi file `index.php` yang akan menampilkan php version

   Halaman php version harus dapat diakses melalui port 8000

3. Buat vagrant virtualbox dan lakukan provisioning 
   * nginx 
   * php7-fpm

   Buat sinkronisasi folder `src` ke `var/www`, folder `src` berisi aplikasi
   `codeigniter`.

   Codeigniter harus dapat diakses melalui port 8000.

4. Buat vagrant virtualbox dan lakukan provisioning  
   * mariadb
   
   Lakukan konfigurasi mariadb berikut saat provisioning
   * Buat user `"cloud"`dengan password `"cloud!"`
   * Buat database `"vagrant-cloud"` dan beri akses ke user `"cloud"`
   * Perbolehkan akses user `"cloud"` dari subnet `"10.0.0.0/8"`.
   
Untuk setiap permasalahan yang akan dipecahkan buatlah `Vagrantfile` 
masing-masing beserta script `provisioning`.


## Vagrant docker

1. Buat kontainer bernama `mysql-kita` dengan base image `mysql` menggunakan vagrant dan docker.

2. Set password kontainer `mysql-kita`, denggan mengeset variabel `MYSQL_ROOT_PASSWORD` = `"cloud!"`.

3. Buat folder `db` pada komputer host dan atur konfigurasi folder volume yang akan digunakan oleh kontainer `mysql-kita`
   ke folder `db`.

Buatlah `Vagrantfile` untuk menyelesaikan ketiga permasalahan tersebut



[port forwarder]: images/port-forwarder.png "port forwarder" { width:auto; max-width:90% }


[vm_vs_container]: images/vm_vs_container.png "vm_vs_container" { width:auto; max-width:90% }
